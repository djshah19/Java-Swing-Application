/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.BackGroundCheck;

import business.EcoSystem;
import business.Enterprise.Enterprise;
import business.FireArmsRegistration.FireArmsRegistration;
import business.GunLicense.GunLicense;
import business.Organization.GunLicenseOrganization;
import business.MentalHealthReport.MentalHealthReport;
import business.Network.Network;
import business.Organization.BackGroundCheck;
import business.Organization.FireArmsOrganization;
import business.Organization.MentalHealthCheckUp;
import business.Organization.Organization;
import business.UserAccount.UserAccount;
import business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Dhwani
 */
public class BgcOpenRequest extends javax.swing.JPanel {

    /**
     * Creates new form BgcOpenRequest
     */
    private JPanel userProcessContainer; 
    private UserAccount account;
    private Organization organization; 
    private EcoSystem business;
    private Network network;
    BgcOpenRequest(JPanel userProcessContainer, UserAccount account, Organization organization, 
            EcoSystem business, Network network) {
      initComponents(); 
       this.userProcessContainer = userProcessContainer;
       this.account = account;
       this.organization = (BackGroundCheck)organization;
       this.business = business;
       this.network = network;
       populateTable();
    }
    public void populateTable(){
    DefaultTableModel dtm = (DefaultTableModel)tblPoliceRequests.getModel();
    dtm.setRowCount(0);
    
    for(WorkRequest wr : organization.getWorkQueue().getWorkRequest()){
    if(!wr.getStatus().equalsIgnoreCase("Approved") && !wr.getStatus().equalsIgnoreCase("Rejected") && 
    !wr.getStatus().equalsIgnoreCase("Order Accepted") && 
    !wr.getStatus().equalsIgnoreCase("Order Declined")){
    Object[] row = new Object[5];
    row[0] = wr.getNo();
    row[1] = wr.getFireArms().getModel();
    row[2] = wr.getSender().getCustomer().getSsn();
    row[3] = wr;
    row[4] = wr.getMessage();
    dtm.addRow(row);
    }}
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblPoliceRequests = new javax.swing.JTable();
        btnViewDet = new javax.swing.JButton();
        btnRiskAss = new javax.swing.JButton();
        btnRoutoHos = new javax.swing.JButton();
        btnViewHosRep = new javax.swing.JButton();
        btnViewStats = new javax.swing.JButton();
        btnRouteToLicOrg = new javax.swing.JButton();
        btnRouToFireArms = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        btnApprove = new javax.swing.JButton();
        btnReject = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(19, 115, 163));

        tblPoliceRequests.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Request No", "Ordered Item", "SSN", "Status", "Message"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblPoliceRequests);

        btnViewDet.setBackground(new java.awt.Color(0, 153, 153));
        btnViewDet.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnViewDet.setForeground(new java.awt.Color(255, 255, 255));
        btnViewDet.setText("View Details");
        btnViewDet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewDetActionPerformed(evt);
            }
        });

        btnRiskAss.setBackground(new java.awt.Color(0, 153, 153));
        btnRiskAss.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnRiskAss.setForeground(new java.awt.Color(255, 255, 255));
        btnRiskAss.setText("View Risk Assessment");
        btnRiskAss.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRiskAssActionPerformed(evt);
            }
        });

        btnRoutoHos.setBackground(new java.awt.Color(0, 153, 153));
        btnRoutoHos.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnRoutoHos.setForeground(new java.awt.Color(255, 255, 255));
        btnRoutoHos.setText("Route Request to Hospital");
        btnRoutoHos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRoutoHosActionPerformed(evt);
            }
        });

        btnViewHosRep.setBackground(new java.awt.Color(0, 153, 153));
        btnViewHosRep.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnViewHosRep.setForeground(new java.awt.Color(255, 255, 255));
        btnViewHosRep.setText("View Hospital Report");
        btnViewHosRep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewHosRepActionPerformed(evt);
            }
        });

        btnViewStats.setBackground(new java.awt.Color(0, 153, 153));
        btnViewStats.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnViewStats.setForeground(new java.awt.Color(255, 255, 255));
        btnViewStats.setText("View Stats");
        btnViewStats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewStatsActionPerformed(evt);
            }
        });

        btnRouteToLicOrg.setBackground(new java.awt.Color(0, 153, 153));
        btnRouteToLicOrg.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnRouteToLicOrg.setForeground(new java.awt.Color(255, 255, 255));
        btnRouteToLicOrg.setText("Route Request to License Org");
        btnRouteToLicOrg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRouteToLicOrgActionPerformed(evt);
            }
        });

        btnRouToFireArms.setBackground(new java.awt.Color(0, 153, 153));
        btnRouToFireArms.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnRouToFireArms.setForeground(new java.awt.Color(255, 255, 255));
        btnRouToFireArms.setText("Route Request to FireArms Org");
        btnRouToFireArms.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRouToFireArmsActionPerformed(evt);
            }
        });

        btnBack.setBackground(new java.awt.Color(0, 153, 153));
        btnBack.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnBack.setForeground(new java.awt.Color(255, 255, 255));
        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnApprove.setBackground(new java.awt.Color(0, 153, 153));
        btnApprove.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnApprove.setForeground(new java.awt.Color(255, 255, 255));
        btnApprove.setText("Approve");
        btnApprove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApproveActionPerformed(evt);
            }
        });

        btnReject.setBackground(new java.awt.Color(0, 153, 153));
        btnReject.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnReject.setForeground(new java.awt.Color(255, 255, 255));
        btnReject.setText("Reject");
        btnReject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRejectActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 204, 204));
        jLabel1.setText("Open Request(s)");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnViewDet)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnRoutoHos)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(btnRiskAss)
                                            .addComponent(btnViewStats))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(btnApprove)
                                            .addComponent(btnViewHosRep))
                                        .addGap(47, 47, 47)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnRouToFireArms, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnRouteToLicOrg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnReject)))
                            .addComponent(btnBack)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 530, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(220, 220, 220)
                        .addComponent(jLabel1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnViewDet)
                    .addComponent(btnRoutoHos)
                    .addComponent(btnRouteToLicOrg))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnRiskAss)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnViewHosRep)
                        .addComponent(btnRouToFireArms)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnViewStats)
                    .addComponent(btnApprove)
                    .addComponent(btnReject))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addComponent(btnBack)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnViewDetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewDetActionPerformed
    int selectedRow = tblPoliceRequests.getSelectedRow();
    if(selectedRow>=0){
    int ssn = (Integer)tblPoliceRequests.getValueAt(selectedRow, 2);
    DetailsViewPanel panel = new DetailsViewPanel(userProcessContainer, ssn, business);
    userProcessContainer.add("DetailsViewPanel", panel);
    CardLayout layout = (CardLayout)userProcessContainer.getLayout();
    layout.next(userProcessContainer);     
    }
    else{
    JOptionPane.showMessageDialog(null, "Please select any row");
        }
    }//GEN-LAST:event_btnViewDetActionPerformed

    private void btnRiskAssActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRiskAssActionPerformed
    int selectedRow = tblPoliceRequests.getSelectedRow();
    if(selectedRow>=0){
    WorkRequest wr = (WorkRequest)tblPoliceRequests.getValueAt(selectedRow, 3);
    ViewRiskAssessmentJPanel panel = new ViewRiskAssessmentJPanel(userProcessContainer, wr);
    userProcessContainer.add("ViewRiskAssessmentJPanel",panel);
    CardLayout layout = (CardLayout)userProcessContainer.getLayout();
    layout.next(userProcessContainer);
    }else{
            JOptionPane.showMessageDialog(null, "Please select any row");
        }
    }//GEN-LAST:event_btnRiskAssActionPerformed

    private void btnRoutoHosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRoutoHosActionPerformed
    int selectedRow = tblPoliceRequests.getSelectedRow();
    if(selectedRow>=0){
    MentalHealthReport inMhr = null;
    Organization inOrg = null;
    WorkRequest workrq = (WorkRequest)tblPoliceRequests.getValueAt(selectedRow, 3);
    if(workrq.getMessage().equalsIgnoreCase("Pending with Hospital")){
    JOptionPane.showMessageDialog(null, "Request already with Hospital");
    return;
    }
    for(MentalHealthReport mhr : workrq.getMentalHealthReportDirectory().getMentalHealthReport()){
    inMhr = mhr;
    break;
    }
    if(inMhr!=null){
    JOptionPane.showMessageDialog(null, "Request already served by Hospital");
    return;
    }
    for(Enterprise ent : network.getEnterpriseDirectory().getEnterpriseList()){
    for(Organization org : ent.getOrganizationDirectory().getOrganizationList()){
    if(org instanceof MentalHealthCheckUp){
    inOrg = org;
    break;
    }
    }
    }
    workrq.setStatus("Under Process");
    workrq.setMessage("Pending with Hospital");
    JOptionPane.showMessageDialog(null, "Request successfully routed to hospital");
    inOrg.getWorkQueue().getWorkRequest().add(workrq);
    populateTable();
    }else{
            JOptionPane.showMessageDialog(null, "Please select any row");
        }
    }//GEN-LAST:event_btnRoutoHosActionPerformed

    private void btnViewHosRepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewHosRepActionPerformed
    int selectedRow = tblPoliceRequests.getSelectedRow();
    if(selectedRow>=0){
    MentalHealthReport inMhr = null;
    WorkRequest workrq = (WorkRequest)tblPoliceRequests.getValueAt(selectedRow, 3);
    for(MentalHealthReport mhr : workrq.getMentalHealthReportDirectory().getMentalHealthReport()){
    inMhr = mhr;
    break;
    }
    if(inMhr!=null){
    ViewReportJPanel panel = new ViewReportJPanel(userProcessContainer, inMhr);
    userProcessContainer.add("ViewReportJPanel", panel);
    CardLayout layout = (CardLayout)userProcessContainer.getLayout();
    layout.next(userProcessContainer);
    }else{
    JOptionPane.showMessageDialog(null, "Report not yet available");
    }
    }else{
            JOptionPane.showMessageDialog(null, "Please select any row");
        }
    }//GEN-LAST:event_btnViewHosRepActionPerformed

    private void btnViewStatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewStatsActionPerformed
    int selectedRow = tblPoliceRequests.getSelectedRow();
    if(selectedRow>=0){
    WorkRequest workrq = (WorkRequest)tblPoliceRequests.getValueAt(selectedRow, 3);
    ViewStatsJPanel panel = new ViewStatsJPanel(userProcessContainer, workrq, business);
    userProcessContainer.add("ViewStatsJPanel", panel);
    CardLayout layout = (CardLayout)userProcessContainer.getLayout();
    layout.next(userProcessContainer);
    }else{
    JOptionPane.showMessageDialog(null, "Please select any row");
    }
    }//GEN-LAST:event_btnViewStatsActionPerformed

    private void btnRouteToLicOrgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRouteToLicOrgActionPerformed
    int selectedRow = tblPoliceRequests.getSelectedRow();
    if(selectedRow>=0){
    Organization inOrg = null;
    int ssn = (Integer)tblPoliceRequests.getValueAt(selectedRow, 2);
    WorkRequest workrq = (WorkRequest)tblPoliceRequests.getValueAt(selectedRow, 3);
    if(!workrq.getMessage().equalsIgnoreCase("Pending with Police")){
    JOptionPane.showMessageDialog(null, "Request not with police");
    return;
    }
    GunLicense gl = business.getGunLicenseDirectory().getGunLicenseNo(ssn);
    if(gl!=null){
    JOptionPane.showMessageDialog(null, "Person already has gun license");
    return;
    }
    for(Enterprise ent : network.getEnterpriseDirectory().getEnterpriseList()){
    for(Organization org : ent.getOrganizationDirectory().getOrganizationList()){
    if(org instanceof GunLicenseOrganization){
    inOrg = org;
    break;
    }
    }
    }
    workrq.setMessage("Pending with Gun License Department");
    JOptionPane.showMessageDialog(null, "Request successfully routed to gun license department");
    inOrg.getWorkQueue().getWorkRequest().add(workrq);
    populateTable();
    }else{
    JOptionPane.showMessageDialog(null, "Please select any row");
    }
    }//GEN-LAST:event_btnRouteToLicOrgActionPerformed

    private void btnRouToFireArmsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRouToFireArmsActionPerformed
    int selectedRow = tblPoliceRequests.getSelectedRow();
    if(selectedRow>=0){
    Organization inOrg = null;
    WorkRequest workrq = (WorkRequest)tblPoliceRequests.getValueAt(selectedRow, 3);
    if(!workrq.getMessage().equalsIgnoreCase("Pending with Police")){
    JOptionPane.showMessageDialog(null, "Request not with police");
    return;
    }
    if(workrq.getMessage().equalsIgnoreCase("Pending with firearms department")){
    JOptionPane.showMessageDialog(null, "Request already with firearms department");
    return;
    }
    for(Enterprise ent : network.getEnterpriseDirectory().getEnterpriseList()){
    for(Organization org : ent.getOrganizationDirectory().getOrganizationList()){
    if(org instanceof FireArmsOrganization){
    inOrg = org;
    break;
    }
    }
    }
    WorkRequest inWkRq = null;
    for(WorkRequest wkRq: inOrg.getWorkQueue().getWorkRequest() ){
    inWkRq = wkRq;
    }
    if(inWkRq!=null){
    JOptionPane.showMessageDialog(null, "Request already served by firearms department");
    return;
    }
    workrq.setMessage("Pending with Firearms Department");
    JOptionPane.showMessageDialog(null, "Request successfully routed to firearms department");
    inOrg.getWorkQueue().getWorkRequest().add(workrq);
    }else{
    JOptionPane.showMessageDialog(null, "Please select any row");
    }
    
    }//GEN-LAST:event_btnRouToFireArmsActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
    userProcessContainer.remove(this);
    CardLayout layout = (CardLayout)userProcessContainer.getLayout();
    layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnApproveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApproveActionPerformed
    int selectedRow = tblPoliceRequests.getSelectedRow();
    if(selectedRow>=0){
    WorkRequest workrq = (WorkRequest)tblPoliceRequests.getValueAt(selectedRow, 3);
    if(!workrq.getMessage().equalsIgnoreCase("Pending with Police")){
    JOptionPane.showMessageDialog(null, "Request not with Police");
    return;
    }
    int ssn = (Integer)tblPoliceRequests.getValueAt(selectedRow, 2);
    GunLicense gl = business.getGunLicenseDirectory().getGunLicenseNo(ssn);
    if(gl==null){
    JOptionPane.showMessageDialog(null, "Person does not have gun license");
    return;
    }
    FireArmsRegistration far = business.getFarDirectory().getDetails(ssn);
    if(far==null){
    JOptionPane.showMessageDialog(null, "Fire arm not registered");
    return;
    }
    JOptionPane.showMessageDialog(null, "Request Approved");
    workrq.setStatus("Approved");
    workrq.setMessage("Request approved by police");
    populateTable();
    }else{
    JOptionPane.showMessageDialog(null, "Please select any row");
    }
    }//GEN-LAST:event_btnApproveActionPerformed

    private void btnRejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRejectActionPerformed
    int selectedRow = tblPoliceRequests.getSelectedRow();
    if(selectedRow>=0){
    WorkRequest workrq = (WorkRequest)tblPoliceRequests.getValueAt(selectedRow, 3);
    if(!workrq.getMessage().equalsIgnoreCase("Pending with Police")){
    JOptionPane.showMessageDialog(null, "Request not with Police");
    return;
    }
    JOptionPane.showMessageDialog(null, "Request Rejected");
    workrq.setStatus("Rejected");
    workrq.setMessage("Request rejected by police");
    populateTable();
    }else{
    JOptionPane.showMessageDialog(null, "Please select any row");
    }
    }//GEN-LAST:event_btnRejectActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApprove;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnReject;
    private javax.swing.JButton btnRiskAss;
    private javax.swing.JButton btnRouToFireArms;
    private javax.swing.JButton btnRouteToLicOrg;
    private javax.swing.JButton btnRoutoHos;
    private javax.swing.JButton btnViewDet;
    private javax.swing.JButton btnViewHosRep;
    private javax.swing.JButton btnViewStats;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblPoliceRequests;
    // End of variables declaration//GEN-END:variables
}
